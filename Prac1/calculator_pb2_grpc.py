# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import calculator_pb2 as calculator__pb2


class CalculatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_worker = channel.unary_unary(
                '/Calculator/create_worker',
                request_serializer=calculator__pb2.Empty.SerializeToString,
                response_deserializer=calculator__pb2.Int.FromString,
                )
        self.delete_worker = channel.unary_unary(
                '/Calculator/delete_worker',
                request_serializer=calculator__pb2.Int.SerializeToString,
                response_deserializer=calculator__pb2.Int.FromString,
                )
        self.list_workers = channel.unary_unary(
                '/Calculator/list_workers',
                request_serializer=calculator__pb2.Empty.SerializeToString,
                response_deserializer=calculator__pb2.String.FromString,
                )
        self.job_worker = channel.unary_unary(
                '/Calculator/job_worker',
                request_serializer=calculator__pb2.Operation.SerializeToString,
                response_deserializer=calculator__pb2.String.FromString,
                )


class CalculatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_worker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_worker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_workers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def job_worker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_worker': grpc.unary_unary_rpc_method_handler(
                    servicer.create_worker,
                    request_deserializer=calculator__pb2.Empty.FromString,
                    response_serializer=calculator__pb2.Int.SerializeToString,
            ),
            'delete_worker': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_worker,
                    request_deserializer=calculator__pb2.Int.FromString,
                    response_serializer=calculator__pb2.Int.SerializeToString,
            ),
            'list_workers': grpc.unary_unary_rpc_method_handler(
                    servicer.list_workers,
                    request_deserializer=calculator__pb2.Empty.FromString,
                    response_serializer=calculator__pb2.String.SerializeToString,
            ),
            'job_worker': grpc.unary_unary_rpc_method_handler(
                    servicer.job_worker,
                    request_deserializer=calculator__pb2.Operation.FromString,
                    response_serializer=calculator__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Calculator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Calculator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_worker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Calculator/create_worker',
            calculator__pb2.Empty.SerializeToString,
            calculator__pb2.Int.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_worker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Calculator/delete_worker',
            calculator__pb2.Int.SerializeToString,
            calculator__pb2.Int.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_workers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Calculator/list_workers',
            calculator__pb2.Empty.SerializeToString,
            calculator__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def job_worker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Calculator/job_worker',
            calculator__pb2.Operation.SerializeToString,
            calculator__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
